#!/usr/bin/env python3

import sys
from datetime import datetime

import click
from pytz import timezone, all_timezones, BaseTzInfo
from tzlocal import get_localzone

common_abbreviations = {
    'PDT': 'US/Pacific',
    'BST': 'Europe/London',
    'CET': 'Europe/Berlin',
    'CEST': 'Europe/Berlin',
    'EST': 'US/Eastern',
    'EDT': 'US/Eastern',
    'AST': 'US/Eastern',
    'CST': 'US/Central',
    'CDT': 'US/Central',
    'EET': 'Europe/Bucharest',
    'EEST': 'Europe/Bucharest',
    'WET': 'GMT',
    'WEST': 'Europe/London',
    'FET': 'Europe/Moscow',
}

def get_tz(string):
    if string in common_abbreviations:
        return common_abbreviations[string]
    elif string in all_timezones:
        return string
    for tz in all_timezones:
        if string in tz:
            return tz
    raise ValueError(f'Unknown timezone name: {string}')

def make_tz(ctx, argument, value):
    if isinstance(value, BaseTzInfo):
        return value
    return timezone(get_tz(value))

def make_dt(ctx, argument, value):
    if isinstance(value, datetime):
        return value
    ymd = datetime.now().strftime('%Y-%m-%d-')

    for frmt in '%Y-%m-%d-%H:%M', '%Y-%m-%d-%H':
        try:
            return datetime.strptime(ymd + value, frmt)
        except ValueError:  # to replace with actual error
            pass
    else:
        raise click.BadParameter(f"Invalid timestamp: {value}")


@click.command()
@click.option(
    "--from",
    "from_",
    help="Timezone to convert from",
    default=get_localzone(),
    callback=make_tz,
)
@click.option(
    "--to",
    help="Timezone to convert to",
    default=get_localzone(),
    callback=make_tz,
)
@click.argument(
    "time",
    default=datetime.now(),
    callback=make_dt,
)
def cli(from_, to, time):
    tzdt = from_.localize(time)
    targetdt = tzdt.astimezone(to)
    print("{} â†’ {}".format(from_, to))
    print(targetdt.strftime('%H:%M'))

if __name__ == '__main__':
    cli()
