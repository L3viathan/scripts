#!/usr/local/bin/python3
"""Episode Browser

Requires Python 3 and mpv. Run in a directory of movies, will play the first file.
Next time, it will play the next one, and so on. Run it with some string to play
the first matching file.

Usage:
    episode watch [--dry-run] [--no-mpv] [EPISODE]
    episode update

Options:
    -h --help   Show this screen.
    --version   Show version.
    --dry-run   Don't do anything, just show what would be played
    --no-mpv    Play with system default instead of mpv

"""
import os
import platform
import sys
import re
import requests
from docopt import docopt
from glob import glob

args = docopt(__doc__, version="v0.3")
episodes = list(glob("*.*"))
hidden_data = ".last-episode-id"
blacklist = ("HDTV", "720p", "1080p", "x264")

if args["--no-mpv"]:
    if "Darwin" == platform.system():
        open_command = "open"
    elif "Linux" == platform.system():
        open_command = "xdg-open"
    else: #windows ?
        open_command = "start"
else:
    open_command = "mpv"


def lget(l, idx, default):
    try:
        return l[idx]
    except IndexError:
        return default

def play(somefile, actually=True):
    log("Playing {}".format(formatEpisode(somefile)))
    if actually: os.system(open_command + ' "' + somefile + '" >/dev/null 2>&1')

def formatEpisode(filename):
    matches = re.findall(r'S(\d+)E(\d+)\W+(.+?)\.\w+',filename)
    if matches:
        match = matches[0]
        if match[2] in blacklist:
            return "season {}, episode {}".format(int(match[0]), int(match[1]))
        return "season {}, episode {}: {}".format(int(match[0]), int(match[1]), match[2])
    else:
        return filename

def log(some_string, file=sys.stderr):
    print(some_string, file=file)

def update():
    url = 'https://raw.githubusercontent.com/L3viathan/scripts/master/episode'
    log("Trying to update this script...")
    r = requests.get(url, timeout=5)
    if r.status_code == 200:
        log("Response ok, writing to file")
        with open(__file__, 'w') as script:
            script.write(r.text)
    else:
        log("Failed.")

def install_completions():
    completion = """#compdef episode

_arguments "1: :(watch update)"\\
    "2:Options:(--no-mpv --dry-run)"
    """
    comp_folder = os.path.expanduser("~/.oh-my-zsh/completions")
    if os.path.isdir(comp_folder):
        if not os.path.exists("{}/_episode".format(comp_folder)):
            with open("{}/_episode".format(comp_folder),"w") as f:
                f.write(completion)
            log("Installed ZSH completions")

def get_id():
    try:
        last = int(open(hidden_data).read())
        return last
    except FileNotFoundError:
        try:
            os.remove(hidden_data)
        except FileNotFoundError:
            pass
        finally:
            return None

def set_id(_id):
    try:
        open(hidden_data,"w").write(str(int(_id)))
    except:
        log("Can only set to integer")

w = not args["--dry-run"]

if args["watch"] or args["play"]:
    if args["EPISODE"]:
        for id_, episode in enumerate(episodes):
            if args["EPISODE"].lower() in episode.lower():
                this_episode = id_
    else:
        last_episode = get_id()
        if last_episode is not None:
            this_episode = last_episode + 1
        else:
            this_episode = 0
    if lget(episodes,this_episode, None) is not None:
        play(episodes[this_episode], w)
        if lget(episodes,this_episode+1, None) is not None:
            log("Next up: {}".format(formatEpisode(episodes[this_episode+1])))
        if w: set_id(this_episode)
    else:
        log("Out of episodes. Run again to start from the beginning.")
        if w: os.remove(hidden_data)
elif args["update"]:
    update()

install_completions()
